from flask import Flask, render_template
import pandas as pd
import subprocess
from datetime import datetime

app = Flask(__name__)

# AQI calculation functions
def calculate_aqi(concentration, breakpoints):
    for i in range(len(breakpoints)-1):
        if concentration >= breakpoints[i][0] and concentration < breakpoints[i+1][0]:
            c_low, c_high = breakpoints[i]
            i_low, i_high = breakpoints[i+1]
            return ((i_high - i_low) / (c_high - c_low)) * (concentration - c_low) + i_low
    return breakpoints[-1][1]

# AQI breakpoints
pm25_breakpoints = [(0, 50), (31, 100), (61, 150), (91, 200), (121, 300), (251, 500)]
pm10_breakpoints = [(0, 50), (51, 100), (101, 150), (251, 200), (351, 300), (431, 500)]
no2_breakpoints = [(0, 50), (41, 100), (81, 150), (181, 200), (281, 300), (401, 500)]
co_breakpoints = [(0, 50), (2.1, 100), (4.5, 150), (9.5, 200), (12.5, 300), (15.5, 500)]
o3_breakpoints = [(0, 50), (101, 100), (181, 150), (241, 200), (301, 300), (401, 500)]

# Home route
@app.route('/')
def index():
    return render_template('index.html')

# Route to trigger data collection and fetch AQI
@app.route('/collect_data')
def collect_data():
    try:
        # Run collect.py using subprocess to save data in CSV
        subprocess.run(["python", "collect.py"], check=True)

        # Load CSV data
        df = pd.read_csv('livedata.csv')
        latest_data = df.tail(1).iloc[0]
        
        # Sensor values
        pm25 = latest_data['PM2.5']
        pm10 = latest_data['PM10']
        no2 = latest_data['NO2']
        co = latest_data['CO']
        o3 = latest_data['O3']

        # AQI calculation
        pm25_aqi = calculate_aqi(pm25, pm25_breakpoints)
        pm10_aqi = calculate_aqi(pm10, pm10_breakpoints)
        no2_aqi = calculate_aqi(no2, no2_breakpoints)
        co_aqi = calculate_aqi(co, co_breakpoints)
        o3_aqi = calculate_aqi(o3, o3_breakpoints)

        overall_aqi = max(pm25_aqi, pm10_aqi, no2_aqi, co_aqi, o3_aqi)

        # Capture the timestamp
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

        # Return the data as a dictionary to be used in the frontend
        return render_template('index.html', 
                               pm25=pm25, pm10=pm10, no2=no2, co=co, o3=o3,
                               pm25_aqi=pm25_aqi, pm10_aqi=pm10_aqi, 
                               no2_aqi=no2_aqi, co_aqi=co_aqi, o3_aqi=o3_aqi,
                               overall_aqi=overall_aqi, timestamp=timestamp)
    except Exception as e:
        return str(e)

if __name__ == '__main__':
    app.run(debug=True)





















<!DOCTYPE html>
<html>
<head>
    <title>Air Quality Dashboard</title>
</head>
<body>
    <h1>Air Quality Monitoring Dashboard</h1>

    {% if timestamp %}
    <h2>Last Updated: {{ timestamp }}</h2>
    <ul>
        <li><strong>PM2.5:</strong> {{ pm25 }} µg/m³ (AQI: {{ pm25_aqi }})</li>
        <li><strong>PM10:</strong> {{ pm10 }} µg/m³ (AQI: {{ pm10_aqi }})</li>
        <li><strong>NO₂:</strong> {{ no2 }} µg/m³ (AQI: {{ no2_aqi }})</li>
        <li><strong>CO:</strong> {{ co }} mg/m³ (AQI: {{ co_aqi }})</li>
        <li><strong>O₃:</strong> {{ o3 }} µg/m³ (AQI: {{ o3_aqi }})</li>
    </ul>

    <h3>Overall AQI: {{ overall_aqi }} ({{ aqi_level }})</h3>
    {% else %}
    <p>No data found in livedata.csv</p>
    {% endif %}
</body>
</html>
